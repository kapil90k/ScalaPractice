[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(D:\IntellijWorkspace\ScalaPractice\src\main\scala\org\LamdaFunction1.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\org\MinimumTemp.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\org\GenericsTest.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\org\CaseClassMap.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\org\GenericPractice1.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\org\LamdaFunction2.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\org\PracticeAny.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\org\ConfigFactory.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\LamdaFunction2.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\GenericPractice1.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\LamdaFunction1.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\PropFileMap.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\CaseClassMap.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\PracticeAny.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\MinimumTemp.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\CaseClassEncoder.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(org.Temperature, org.Vehicle, org.PracticeAny, org.GenericPractice1.Engine, org.MinimumTemp, org.Engine, org.GenericPractice1, org.CaseClassMap, org.GenericsTest, org.LamdaFunction1, org.PracticeAny.Engine, com.Employee1, com.CaseClassEncoder, org.PracticeAny.Vehicle, org.LamdaFunction2, org.GenericPractice1.Vehicle, org.ConfigFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(org.Temperature, org.Vehicle, org.PracticeAny, org.GenericPractice1.Engine, org.MinimumTemp, org.Engine, org.GenericPractice1, org.CaseClassMap, org.GenericsTest, org.LamdaFunction1, org.PracticeAny.Engine, com.Employee1, com.CaseClassEncoder, org.PracticeAny.Vehicle, org.LamdaFunction2, org.GenericPractice1.Vehicle, org.ConfigFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\LamdaFunction2.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\GenericPractice1.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\LamdaFunction1.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\PropFileMap.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\CaseClassMap.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\PracticeAny.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\MinimumTemp.scala, D:\IntellijWorkspace\ScalaPractice\src\main\scala\com\CaseClassEncoder.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all 13 sources: invalidated sources (16) exceeded 50.0% of all sources[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 13 Scala sources to D:\IntellijWorkspace\ScalaPractice\target\scala-2.11\classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.11:1.1.1:compile for Scala 2.11.8[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.11:1.1.1:compile for Scala 2.11.8[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 14e0a0ac for Scala compiler version 2.11.8[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	C:\Program Files\Java\jdk1.8.0_131\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\sunrsasign.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_131\jre\classes;C:\Users\Sonu\.ivy2\cache\org.scala-lang\scala-library\jars\scala-library-2.11.8.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	D:\IntellijWorkspace\ScalaPractice\target\scala-2.11\classes;C:\Users\Sonu\.ivy2\cache\org.scala-lang\scala-compiler\jars\scala-compiler-2.11.8.jar;C:\Users\Sonu\.ivy2\cache\org.scala-lang\scala-reflect\jars\scala-reflect-2.11.8.jar;C:\Users\Sonu\.ivy2\cache\org.scala-lang.modules\scala-xml_2.11\bundles\scala-xml_2.11-1.0.4.jar;C:\Users\Sonu\.ivy2\cache\org.scala-lang.modules\scala-parser-combinators_2.11\bundles\scala-parser-combinators_2.11-1.0.4.jar;C:\Users\Sonu\.ivy2\cache\org.apache.spark\spark-core_2.11\jars\spark-core_2.11-2.2.0.jar;C:\Users\Sonu\.ivy2\cache\org.apache.avro\avro\jars\avro-1.7.7.jar;C:\Users\Sonu\.ivy2\cache\org.codehaus.jackson\jackson-core-asl\jars\jackson-core-asl-1.9.13.jar;C:\Users\Sonu\.ivy2\cache\org.codehaus.jackson\jackson-mapper-asl\jars\jackson-mapper-asl-1.9.13.jar;C:\Users\Sonu\.ivy2\cache\org.xerial.snappy\snappy-java\bundles\snappy-java-1.1.2.6.jar;C:\Users\Sonu\.ivy2\cache\org.apache.commons\commons-compress\jars\commons-compress-1.4.1.jar;C:\Users\Sonu\.ivy2\cache\org.tukaani\xz\jars\xz-1.0.jar;C:\Users\Sonu\.ivy2\cache\org.slf4j\slf4j-api\jars\slf4j-api-1.7.16.jar;C:\Users\Sonu\.ivy2\cache\org.apache.avro\avro-mapred\jars\avro-mapred-1.7.7-hadoop2.jar;C:\Users\Sonu\.ivy2\cache\org.apache.avro\avro-ipc\jars\avro-ipc-1.7.7-tests.jar;C:\Users\Sonu\.ivy2\cache\org.apache.avro\avro-ipc\jars\avro-ipc-1.7.7.jar;C:\Users\Sonu\.ivy2\cache\com.twitter\chill_2.11\jars\chill_2.11-0.8.0.jar;C:\Users\Sonu\.ivy2\cache\com.twitter\chill-java\jars\chill-java-0.8.0.jar;C:\Users\Sonu\.ivy2\cache\com.esotericsoftware\kryo-shaded\bundles\kryo-shaded-3.0.3.jar;C:\Users\Sonu\.ivy2\cache\com.esotericsoftware\minlog\bundles\minlog-1.3.0.jar;C:\Users\Sonu\.ivy2\cache\org.objenesis\objenesis\jars\objenesis-2.1.jar;C:\Users\Sonu\.ivy2\cache\org.apache.xbean\xbean-asm5-shaded\bundles\xbean-asm5-shaded-4.4.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hadoop\hadoop-client\jars\hadoop-client-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hadoop\hadoop-common\jars\hadoop-common-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hadoop\hadoop-annotations\jars\hadoop-annotations-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\com.google.guava\guava\jars\guava-11.0.2.jar;C:\Users\Sonu\.ivy2\cache\com.google.code.findbugs\jsr305\jars\jsr305-1.3.9.jar;C:\Users\Sonu\.ivy2\cache\commons-cli\commons-cli\jars\commons-cli-1.2.jar;C:\Users\Sonu\.ivy2\cache\org.apache.commons\commons-math3\jars\commons-math3-3.4.1.jar;C:\Users\Sonu\.ivy2\cache\xmlenc\xmlenc\jars\xmlenc-0.52.jar;C:\Users\Sonu\.ivy2\cache\commons-httpclient\commons-httpclient\jars\commons-httpclient-3.1.jar;C:\Users\Sonu\.ivy2\cache\commons-io\commons-io\jars\commons-io-2.4.jar;C:\Users\Sonu\.ivy2\cache\commons-net\commons-net\jars\commons-net-2.2.jar;C:\Users\Sonu\.ivy2\cache\commons-collections\commons-collections\jars\commons-collections-3.2.2.jar;C:\Users\Sonu\.ivy2\cache\log4j\log4j\bundles\log4j-1.2.17.jar;C:\Users\Sonu\.ivy2\cache\commons-lang\commons-lang\jars\commons-lang-2.6.jar;C:\Users\Sonu\.ivy2\cache\commons-configuration\commons-configuration\jars\commons-configuration-1.6.jar;C:\Users\Sonu\.ivy2\cache\commons-digester\commons-digester\jars\commons-digester-1.8.jar;C:\Users\Sonu\.ivy2\cache\commons-beanutils\commons-beanutils\jars\commons-beanutils-1.7.0.jar;C:\Users\Sonu\.ivy2\cache\commons-beanutils\commons-beanutils-core\jars\commons-beanutils-core-1.8.0.jar;C:\Users\Sonu\.ivy2\cache\com.google.protobuf\protobuf-java\bundles\protobuf-java-2.5.0.jar;C:\Users\Sonu\.ivy2\cache\com.google.code.gson\gson\jars\gson-2.2.4.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hadoop\hadoop-auth\jars\hadoop-auth-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\org.apache.directory.server\apacheds-kerberos-codec\bundles\apacheds-kerberos-codec-2.0.0-M15.jar;C:\Users\Sonu\.ivy2\cache\org.apache.directory.server\apacheds-i18n\bundles\apacheds-i18n-2.0.0-M15.jar;C:\Users\Sonu\.ivy2\cache\org.apache.directory.api\api-asn1-api\bundles\api-asn1-api-1.0.0-M20.jar;C:\Users\Sonu\.ivy2\cache\org.apache.directory.api\api-util\bundles\api-util-1.0.0-M20.jar;C:\Users\Sonu\.ivy2\cache\org.apache.curator\curator-framework\bundles\curator-framework-2.6.0.jar;C:\Users\Sonu\.ivy2\cache\org.apache.curator\curator-client\bundles\curator-client-2.6.0.jar;C:\Users\Sonu\.ivy2\cache\org.apache.zookeeper\zookeeper\jars\zookeeper-3.4.6.jar;C:\Users\Sonu\.ivy2\cache\jline\jline\jars\jline-0.9.94.jar;C:\Users\Sonu\.ivy2\cache\io.netty\netty\bundles\netty-3.9.9.Final.jar;C:\Users\Sonu\.ivy2\cache\org.apache.curator\curator-recipes\bundles\curator-recipes-2.6.0.jar;C:\Users\Sonu\.ivy2\cache\org.htrace\htrace-core\jars\htrace-core-3.0.4.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hadoop\hadoop-hdfs\jars\hadoop-hdfs-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\org.mortbay.jetty\jetty-util\jars\jetty-util-6.1.26.jar;C:\Users\Sonu\.ivy2\cache\xerces\xercesImpl\jars\xercesImpl-2.9.1.jar;C:\Users\Sonu\.ivy2\cache\xml-apis\xml-apis\jars\xml-apis-1.3.04.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hadoop\hadoop-mapreduce-client-app\jars\hadoop-mapreduce-client-app-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hadoop\hadoop-mapreduce-client-common\jars\hadoop-mapreduce-client-common-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hadoop\hadoop-yarn-common\jars\hadoop-yarn-common-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hadoop\hadoop-yarn-api\jars\hadoop-yarn-api-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\javax.xml.bind\jaxb-api\jars\jaxb-api-2.2.2.jar;C:\Users\Sonu\.ivy2\cache\javax.xml.stream\stax-api\jars\stax-api-1.0-2.jar;C:\Users\Sonu\.ivy2\cache\org.codehaus.jackson\jackson-jaxrs\jars\jackson-jaxrs-1.9.13.jar;C:\Users\Sonu\.ivy2\cache\org.codehaus.jackson\jackson-xc\jars\jackson-xc-1.9.13.jar;C:\Users\Sonu\.ivy2\cache\com.google.inject\guice\jars\guice-3.0.jar;C:\Users\Sonu\.ivy2\cache\javax.inject\javax.inject\jars\javax.inject-1.jar;C:\Users\Sonu\.ivy2\cache\aopalliance\aopalliance\jars\aopalliance-1.0.jar;C:\Users\Sonu\.ivy2\cache\org.sonatype.sisu.inject\cglib\jars\cglib-2.2.1-v20090111.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hadoop\hadoop-yarn-client\jars\hadoop-yarn-client-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hadoop\hadoop-mapreduce-client-core\jars\hadoop-mapreduce-client-core-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\org.slf4j\slf4j-log4j12\jars\slf4j-log4j12-1.7.16.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hadoop\hadoop-yarn-server-common\jars\hadoop-yarn-server-common-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\org.fusesource.leveldbjni\leveldbjni-all\bundles\leveldbjni-all-1.8.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hadoop\hadoop-mapreduce-client-shuffle\jars\hadoop-mapreduce-client-shuffle-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hadoop\hadoop-mapreduce-client-jobclient\jars\hadoop-mapreduce-client-jobclient-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\org.apache.spark\spark-launcher_2.11\jars\spark-launcher_2.11-2.2.0.jar;C:\Users\Sonu\.ivy2\cache\org.apache.spark\spark-tags_2.11\jars\spark-tags_2.11-2.2.0.jar;C:\Users\Sonu\.ivy2\cache\org.spark-project.spark\unused\jars\unused-1.0.0.jar;C:\Users\Sonu\.ivy2\cache\org.apache.spark\spark-network-common_2.11\jars\spark-network-common_2.11-2.2.0.jar;C:\Users\Sonu\.ivy2\cache\io.netty\netty-all\jars\netty-all-4.0.43.Final.jar;C:\Users\Sonu\.ivy2\cache\org.apache.commons\commons-lang3\jars\commons-lang3-3.5.jar;C:\Users\Sonu\.ivy2\cache\com.fasterxml.jackson.core\jackson-databind\bundles\jackson-databind-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\com.fasterxml.jackson.core\jackson-annotations\bundles\jackson-annotations-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\com.fasterxml.jackson.core\jackson-core\bundles\jackson-core-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\org.apache.commons\commons-crypto\jars\commons-crypto-1.0.0.jar;C:\Users\Sonu\.ivy2\cache\org.apache.spark\spark-network-shuffle_2.11\jars\spark-network-shuffle_2.11-2.2.0.jar;C:\Users\Sonu\.ivy2\cache\io.dropwizard.metrics\metrics-core\bundles\metrics-core-3.1.2.jar;C:\Users\Sonu\.ivy2\cache\org.apache.spark\spark-unsafe_2.11\jars\spark-unsafe_2.11-2.2.0.jar;C:\Users\Sonu\.ivy2\cache\net.java.dev.jets3t\jets3t\jars\jets3t-0.9.3.jar;C:\Users\Sonu\.ivy2\cache\org.apache.httpcomponents\httpcore\jars\httpcore-4.3.3.jar;C:\Users\Sonu\.ivy2\cache\org.apache.httpcomponents\httpclient\jars\httpclient-4.3.6.jar;C:\Users\Sonu\.ivy2\cache\javax.activation\activation\jars\activation-1.1.1.jar;C:\Users\Sonu\.ivy2\cache\mx4j\mx4j\jars\mx4j-3.0.2.jar;C:\Users\Sonu\.ivy2\cache\javax.mail\mail\jars\mail-1.4.7.jar;C:\Users\Sonu\.ivy2\cache\org.bouncycastle\bcprov-jdk15on\jars\bcprov-jdk15on-1.51.jar;C:\Users\Sonu\.ivy2\cache\com.jamesmurty.utils\java-xmlbuilder\jars\java-xmlbuilder-1.0.jar;C:\Users\Sonu\.ivy2\cache\net.iharder\base64\jars\base64-2.3.8.jar;C:\Users\Sonu\.ivy2\cache\javax.servlet\javax.servlet-api\jars\javax.servlet-api-3.1.0.jar;C:\Users\Sonu\.ivy2\cache\org.slf4j\jul-to-slf4j\jars\jul-to-slf4j-1.7.16.jar;C:\Users\Sonu\.ivy2\cache\org.slf4j\jcl-over-slf4j\jars\jcl-over-slf4j-1.7.16.jar;C:\Users\Sonu\.ivy2\cache\com.ning\compress-lzf\bundles\compress-lzf-1.0.3.jar;C:\Users\Sonu\.ivy2\cache\net.jpountz.lz4\lz4\jars\lz4-1.3.0.jar;C:\Users\Sonu\.ivy2\cache\org.roaringbitmap\RoaringBitmap\bundles\RoaringBitmap-0.5.11.jar;C:\Users\Sonu\.ivy2\cache\org.json4s\json4s-jackson_2.11\jars\json4s-jackson_2.11-3.2.11.jar;C:\Users\Sonu\.ivy2\cache\org.json4s\json4s-core_2.11\jars\json4s-core_2.11-3.2.11.jar;C:\Users\Sonu\.ivy2\cache\org.json4s\json4s-ast_2.11\jars\json4s-ast_2.11-3.2.11.jar;C:\Users\Sonu\.ivy2\cache\com.thoughtworks.paranamer\paranamer\jars\paranamer-2.6.jar;C:\Users\Sonu\.ivy2\cache\org.scala-lang\scalap\jars\scalap-2.11.8.jar;C:\Users\Sonu\.ivy2\cache\org.glassfish.jersey.core\jersey-client\jars\jersey-client-2.22.2.jar;C:\Users\Sonu\.ivy2\cache\javax.ws.rs\javax.ws.rs-api\jars\javax.ws.rs-api-2.0.1.jar;C:\Users\Sonu\.ivy2\cache\org.glassfish.jersey.core\jersey-common\jars\jersey-common-2.22.2.jar;C:\Users\Sonu\.ivy2\cache\javax.annotation\javax.annotation-api\jars\javax.annotation-api-1.2.jar;C:\Users\Sonu\.ivy2\cache\org.glassfish.jersey.bundles.repackaged\jersey-guava\bundles\jersey-guava-2.22.2.jar;C:\Users\Sonu\.ivy2\cache\org.glassfish.hk2\hk2-api\jars\hk2-api-2.4.0-b34.jar;C:\Users\Sonu\.ivy2\cache\org.glassfish.hk2\hk2-utils\jars\hk2-utils-2.4.0-b34.jar;C:\Users\Sonu\.ivy2\cache\org.glassfish.hk2.external\aopalliance-repackaged\jars\aopalliance-repackaged-2.4.0-b34.jar;C:\Users\Sonu\.ivy2\cache\org.glassfish.hk2.external\javax.inject\jars\javax.inject-2.4.0-b34.jar;C:\Users\Sonu\.ivy2\cache\org.glassfish.hk2\hk2-locator\jars\hk2-locator-2.4.0-b34.jar;C:\Users\Sonu\.ivy2\cache\org.javassist\javassist\bundles\javassist-3.18.1-GA.jar;C:\Users\Sonu\.ivy2\cache\org.glassfish.hk2\osgi-resource-locator\jars\osgi-resource-locator-1.0.1.jar;C:\Users\Sonu\.ivy2\cache\org.glassfish.jersey.core\jersey-server\jars\jersey-server-2.22.2.jar;C:\Users\Sonu\.ivy2\cache\org.glassfish.jersey.media\jersey-media-jaxb\jars\jersey-media-jaxb-2.22.2.jar;C:\Users\Sonu\.ivy2\cache\javax.validation\validation-api\jars\validation-api-1.1.0.Final.jar;C:\Users\Sonu\.ivy2\cache\org.glassfish.jersey.containers\jersey-container-servlet\jars\jersey-container-servlet-2.22.2.jar;C:\Users\Sonu\.ivy2\cache\org.glassfish.jersey.containers\jersey-container-servlet-core\jars\jersey-container-servlet-core-2.22.2.jar;C:\Users\Sonu\.ivy2\cache\com.clearspring.analytics\stream\jars\stream-2.7.0.jar;C:\Users\Sonu\.ivy2\cache\io.dropwizard.metrics\metrics-jvm\bundles\metrics-jvm-3.1.2.jar;C:\Users\Sonu\.ivy2\cache\io.dropwizard.metrics\metrics-json\bundles\metrics-json-3.1.2.jar;C:\Users\Sonu\.ivy2\cache\io.dropwizard.metrics\metrics-graphite\bundles\metrics-graphite-3.1.2.jar;C:\Users\Sonu\.ivy2\cache\com.fasterxml.jackson.module\jackson-module-scala_2.11\bundles\jackson-module-scala_2.11-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\com.fasterxml.jackson.module\jackson-module-paranamer\bundles\jackson-module-paranamer-2.6.5.jar;C:\Users\Sonu\.ivy2\cache\org.apache.ivy\ivy\jars\ivy-2.4.0.jar;C:\Users\Sonu\.ivy2\cache\oro\oro\jars\oro-2.0.8.jar;C:\Users\Sonu\.ivy2\cache\net.razorvine\pyrolite\jars\pyrolite-4.13.jar;C:\Users\Sonu\.ivy2\cache\net.sf.py4j\py4j\jars\py4j-0.10.4.jar;C:\Users\Sonu\.ivy2\cache\org.codehaus.jettison\jettison\bundles\jettison-1.1.jar;C:\Users\Sonu\.ivy2\cache\org.apache.spark\spark-sql_2.11\jars\spark-sql_2.11-2.2.0.jar;C:\Users\Sonu\.ivy2\cache\com.univocity\univocity-parsers\jars\univocity-parsers-2.2.1.jar;C:\Users\Sonu\.ivy2\cache\org.apache.spark\spark-sketch_2.11\jars\spark-sketch_2.11-2.2.0.jar;C:\Users\Sonu\.ivy2\cache\org.apache.spark\spark-catalyst_2.11\jars\spark-catalyst_2.11-2.2.0.jar;C:\Users\Sonu\.ivy2\cache\org.codehaus.janino\janino\jars\janino-3.0.0.jar;C:\Users\Sonu\.ivy2\cache\org.codehaus.janino\commons-compiler\jars\commons-compiler-3.0.0.jar;C:\Users\Sonu\.ivy2\cache\org.antlr\antlr4-runtime\jars\antlr4-runtime-4.5.3.jar;C:\Users\Sonu\.ivy2\cache\commons-codec\commons-codec\jars\commons-codec-1.10.jar;C:\Users\Sonu\.ivy2\cache\org.apache.parquet\parquet-column\jars\parquet-column-1.8.2.jar;C:\Users\Sonu\.ivy2\cache\org.apache.parquet\parquet-common\jars\parquet-common-1.8.2.jar;C:\Users\Sonu\.ivy2\cache\org.apache.parquet\parquet-encoding\jars\parquet-encoding-1.8.2.jar;C:\Users\Sonu\.ivy2\cache\org.apache.parquet\parquet-hadoop\jars\parquet-hadoop-1.8.2.jar;C:\Users\Sonu\.ivy2\cache\org.apache.parquet\parquet-format\jars\parquet-format-2.3.1.jar;C:\Users\Sonu\.ivy2\cache\org.apache.parquet\parquet-jackson\jars\parquet-jackson-1.8.2.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hbase\hbase-client\jars\hbase-client-1.2.0.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hbase\hbase-annotations\jars\hbase-annotations-1.2.0.jar;C:\Users\Sonu\.ivy2\cache\com.github.stephenc.findbugs\findbugs-annotations\jars\findbugs-annotations-1.3.9-1.jar;C:\Users\Sonu\.ivy2\cache\junit\junit\jars\junit-4.12.jar;C:\Users\Sonu\.ivy2\cache\org.hamcrest\hamcrest-core\jars\hamcrest-core-1.3.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hbase\hbase-protocol\jars\hbase-protocol-1.2.0.jar;C:\Users\Sonu\.ivy2\cache\commons-logging\commons-logging\jars\commons-logging-1.2.jar;C:\Users\Sonu\.ivy2\cache\org.apache.htrace\htrace-core\jars\htrace-core-3.1.0-incubating.jar;C:\Users\Sonu\.ivy2\cache\org.jruby.jcodings\jcodings\jars\jcodings-1.0.8.jar;C:\Users\Sonu\.ivy2\cache\org.jruby.joni\joni\jars\joni-2.1.2.jar;C:\Users\Sonu\.ivy2\cache\com.yammer.metrics\metrics-core\jars\metrics-core-2.2.0.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hbase\hbase-server\jars\hbase-server-1.2.0.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hbase\hbase-procedure\jars\hbase-procedure-1.2.0.jar;C:\Users\Sonu\.ivy2\cache\com.sun.jersey\jersey-core\bundles\jersey-core-1.9.jar;C:\Users\Sonu\.ivy2\cache\com.sun.jersey\jersey-server\bundles\jersey-server-1.9.jar;C:\Users\Sonu\.ivy2\cache\asm\asm\jars\asm-3.1.jar;C:\Users\Sonu\.ivy2\cache\org.apache.commons\commons-math\jars\commons-math-2.2.jar;C:\Users\Sonu\.ivy2\cache\org.mortbay.jetty\jetty\jars\jetty-6.1.26.jar;C:\Users\Sonu\.ivy2\cache\org.mortbay.jetty\jetty-sslengine\jars\jetty-sslengine-6.1.26.jar;C:\Users\Sonu\.ivy2\cache\org.mortbay.jetty\jsp-2.1\jars\jsp-2.1-6.1.14.jar;C:\Users\Sonu\.ivy2\cache\org.mortbay.jetty\jsp-api-2.1\jars\jsp-api-2.1-6.1.14.jar;C:\Users\Sonu\.ivy2\cache\org.mortbay.jetty\servlet-api-2.5\jars\servlet-api-2.5-6.1.14.jar;C:\Users\Sonu\.ivy2\cache\tomcat\jasper-compiler\jars\jasper-compiler-5.5.23.jar;C:\Users\Sonu\.ivy2\cache\org.jamon\jamon-runtime\jars\jamon-runtime-2.4.1.jar;C:\Users\Sonu\.ivy2\cache\com.lmax\disruptor\jars\disruptor-3.3.0.jar;C:\Users\Sonu\.ivy2\cache\org.owasp.esapi\esapi\jars\esapi-2.1.0.jar;C:\Users\Sonu\.ivy2\cache\commons-fileupload\commons-fileupload\jars\commons-fileupload-1.2.jar;C:\Users\Sonu\.ivy2\cache\xom\xom\jars\xom-1.2.5.jar;C:\Users\Sonu\.ivy2\cache\xalan\xalan\jars\xalan-2.7.0.jar;C:\Users\Sonu\.ivy2\cache\org.beanshell\bsh-core\jars\bsh-core-2.0b4.jar;C:\Users\Sonu\.ivy2\cache\org.owasp.antisamy\antisamy\jars\antisamy-1.4.3.jar;C:\Users\Sonu\.ivy2\cache\org.apache.xmlgraphics\batik-css\jars\batik-css-1.7.jar;C:\Users\Sonu\.ivy2\cache\org.apache.xmlgraphics\batik-ext\jars\batik-ext-1.7.jar;C:\Users\Sonu\.ivy2\cache\org.apache.xmlgraphics\batik-util\jars\batik-util-1.7.jar;C:\Users\Sonu\.ivy2\cache\xml-apis\xml-apis-ext\jars\xml-apis-ext-1.3.04.jar;C:\Users\Sonu\.ivy2\cache\net.sourceforge.nekohtml\nekohtml\jars\nekohtml-1.9.12.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hbase\hbase-prefix-tree\jars\hbase-prefix-tree-1.2.0.jar;C:\Users\Sonu\.ivy2\cache\tomcat\jasper-runtime\jars\jasper-runtime-5.5.23.jar;C:\Users\Sonu\.ivy2\cache\commons-el\commons-el\jars\commons-el-1.0.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hbase\hbase-common\jars\hbase-common-1.2.0.jar;C:\Users\Sonu\.ivy2\cache\org.apache.hbase\hbase-hadoop2-compat\jars\hbase-hadoop2-compat-1.2.0.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 2.229796741 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.Vehicle...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.Vehicle,ModifiedNames(changes = UsedName(company,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(id,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(org;Vehicle;init;,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(model,[Default]), UsedName(notifyAll,[Default]), UsedName(copy$default$3,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(wheels,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]))) invalidates 1 classes due to The org.Vehicle has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(company,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(id,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(org;Vehicle;init;,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(model,[Default]), UsedName(notifyAll,[Default]), UsedName(copy$default$3,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(wheels,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.PracticeAny...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.PracticeAny)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.PracticeAny)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.PracticeAny,ModifiedNames(changes = UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(PracticeAny,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The com.PracticeAny has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(PracticeAny,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.PracticeAny)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.PracticeAny.Engine...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.PracticeAny.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.PracticeAny.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.PracticeAny.Engine,ModifiedNames(changes = UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(build,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(com;PracticeAny;Engine;init;,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]), UsedName(strength,[Default]))) invalidates 1 classes due to The com.PracticeAny.Engine has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(build,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(com;PracticeAny;Engine;init;,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]), UsedName(strength,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.PracticeAny.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.PracticeAny.Vehicle...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.PracticeAny.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.PracticeAny.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.PracticeAny.Vehicle,ModifiedNames(changes = UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(manufacturing,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(name,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(org;PracticeAny;Vehicle;init;,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]))) invalidates 1 classes due to The org.PracticeAny.Vehicle has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(manufacturing,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(name,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(org;PracticeAny;Vehicle;init;,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.PracticeAny.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.LamdaFunction1...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.LamdaFunction1)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.LamdaFunction1)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.LamdaFunction1,ModifiedNames(changes = UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(LamdaFunction1,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(lamdaPractice,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(calculateEO,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The com.LamdaFunction1 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(LamdaFunction1,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(lamdaPractice,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(calculateEO,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.LamdaFunction1)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.LamdaFunction1...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.LamdaFunction1)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.LamdaFunction1)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.LamdaFunction1,ModifiedNames(changes = UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(LamdaFunction1,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(lamdaPractice,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(calculateEO,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The org.LamdaFunction1 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(LamdaFunction1,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(lamdaPractice,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(calculateEO,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.LamdaFunction1)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.GenericPractice1...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.GenericPractice1)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.GenericPractice1)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.GenericPractice1,ModifiedNames(changes = UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(GenericPractice1,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(genericPrint,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The org.GenericPractice1 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(GenericPractice1,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(genericPrint,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.GenericPractice1)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.CaseClassMap...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.CaseClassMap)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.CaseClassMap)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.CaseClassMap,ModifiedNames(changes = UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(caseClassToMap2,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(caseClassToMap,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(CaseClassMap,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The com.CaseClassMap has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(caseClassToMap2,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(caseClassToMap,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(CaseClassMap,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.CaseClassMap)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.Temperature...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.Temperature)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.Temperature)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.Temperature,ModifiedNames(changes = UsedName(Temperature,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(temp,[Default]), UsedName(org;Temperature;init;,[Default]), UsedName(hashCode,[Default]), UsedName(tType,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(date,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(copy$default$3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(stationId,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]))) invalidates 1 classes due to The org.Temperature has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(Temperature,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(temp,[Default]), UsedName(org;Temperature;init;,[Default]), UsedName(hashCode,[Default]), UsedName(tType,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(date,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(copy$default$3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(stationId,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.Temperature)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.Engine...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.Engine,ModifiedNames(changes = UsedName(company,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(year,[Default]), UsedName(hashCode,[Default]), UsedName(id,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(copy$default$3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(productArity,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(com;Engine;init;,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]))) invalidates 1 classes due to The com.Engine has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(company,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(year,[Default]), UsedName(hashCode,[Default]), UsedName(id,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(copy$default$3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(productArity,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(com;Engine;init;,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.LamdaFunction2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.LamdaFunction2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.LamdaFunction2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.LamdaFunction2,ModifiedNames(changes = UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(lamdaPractice,[Default]), UsedName(asInstanceOf,[Default]), UsedName(LamdaFunction2,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The com.LamdaFunction2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(lamdaPractice,[Default]), UsedName(asInstanceOf,[Default]), UsedName(LamdaFunction2,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.LamdaFunction2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.GenericPractice1...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.GenericPractice1)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.GenericPractice1)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.GenericPractice1,ModifiedNames(changes = UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(GenericPractice1,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(genericPrint,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The com.GenericPractice1 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(GenericPractice1,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(genericPrint,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.GenericPractice1)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.MinimumTemp...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.MinimumTemp)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.MinimumTemp)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.MinimumTemp,ModifiedNames(changes = UsedName(fileList,[Default]), UsedName(args,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(executionStart,[Default]), UsedName(main,[Default]), UsedName(MinimumTemp,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(delayedInit,[Default]), UsedName(##,[Default]), UsedName(minTemp,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The com.MinimumTemp has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(fileList,[Default]), UsedName(args,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(executionStart,[Default]), UsedName(main,[Default]), UsedName(MinimumTemp,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(delayedInit,[Default]), UsedName(##,[Default]), UsedName(minTemp,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.MinimumTemp)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.Engine...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.Engine,ModifiedNames(changes = UsedName(org;Engine;init;,[Default]), UsedName(company,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(year,[Default]), UsedName(hashCode,[Default]), UsedName(id,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(copy$default$3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(productArity,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]))) invalidates 1 classes due to The org.Engine has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(org;Engine;init;,[Default]), UsedName(company,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(year,[Default]), UsedName(hashCode,[Default]), UsedName(id,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(copy$default$3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(name,[Default]), UsedName(productArity,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.CaseClassMap...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.CaseClassMap)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.CaseClassMap)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.CaseClassMap,ModifiedNames(changes = UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(caseClassToMap2,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(caseClassToMap,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(CaseClassMap,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The org.CaseClassMap has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(caseClassToMap2,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(caseClassToMap,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(CaseClassMap,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.CaseClassMap)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.MinimumTemp...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.MinimumTemp)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.MinimumTemp)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.MinimumTemp,ModifiedNames(changes = UsedName(fileList,[Default]), UsedName(args,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(executionStart,[Default]), UsedName(main,[Default]), UsedName(MinimumTemp,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(delayedInit,[Default]), UsedName(##,[Default]), UsedName(minTemp,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The org.MinimumTemp has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(fileList,[Default]), UsedName(args,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(executionStart,[Default]), UsedName(main,[Default]), UsedName(MinimumTemp,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(delayedInit,[Default]), UsedName(##,[Default]), UsedName(minTemp,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.MinimumTemp)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.LamdaFunction2...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.LamdaFunction2)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.LamdaFunction2)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.LamdaFunction2,ModifiedNames(changes = UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(lamdaPractice,[Default]), UsedName(asInstanceOf,[Default]), UsedName(LamdaFunction2,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The org.LamdaFunction2 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(lamdaPractice,[Default]), UsedName(asInstanceOf,[Default]), UsedName(LamdaFunction2,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.LamdaFunction2)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.GenericPractice1.Vehicle...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.GenericPractice1.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.GenericPractice1.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.GenericPractice1.Vehicle,ModifiedNames(changes = UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(com;GenericPractice1;Vehicle;init;,[Default]), UsedName(manufacturing,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(name,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]))) invalidates 1 classes due to The com.GenericPractice1.Vehicle has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(com;GenericPractice1;Vehicle;init;,[Default]), UsedName(manufacturing,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(name,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.GenericPractice1.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.Vehicle...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.Vehicle,ModifiedNames(changes = UsedName(company,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(com;Vehicle;init;,[Default]), UsedName(hashCode,[Default]), UsedName(id,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(model,[Default]), UsedName(notifyAll,[Default]), UsedName(copy$default$3,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(wheels,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]))) invalidates 1 classes due to The com.Vehicle has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(company,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(com;Vehicle;init;,[Default]), UsedName(hashCode,[Default]), UsedName(id,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(model,[Default]), UsedName(notifyAll,[Default]), UsedName(copy$default$3,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(wheels,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.ConfigFactory...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.ConfigFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.ConfigFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.ConfigFactory,ModifiedNames(changes = UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(ConfigFactory,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getPropertiesAsMap,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The org.ConfigFactory has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(ConfigFactory,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getPropertiesAsMap,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.ConfigFactory)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.GenericsTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.GenericsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.GenericsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.GenericsTest,ModifiedNames(changes = UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(GenericsTest,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The org.GenericsTest has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(GenericsTest,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.GenericsTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.GenericPractice1.Engine...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.GenericPractice1.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.GenericPractice1.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.GenericPractice1.Engine,ModifiedNames(changes = UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(build,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(org;GenericPractice1;Engine;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]), UsedName(strength,[Default]))) invalidates 1 classes due to The org.GenericPractice1.Engine has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(build,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(org;GenericPractice1;Engine;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]), UsedName(strength,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.GenericPractice1.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.PracticeAny.Engine...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.PracticeAny.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.PracticeAny.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.PracticeAny.Engine,ModifiedNames(changes = UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(build,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(ne,[Default]), UsedName(org;PracticeAny;Engine;init;,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]), UsedName(strength,[Default]))) invalidates 1 classes due to The org.PracticeAny.Engine has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(build,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(ne,[Default]), UsedName(org;PracticeAny;Engine;init;,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]), UsedName(strength,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.PracticeAny.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.PracticeAny...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.PracticeAny)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.PracticeAny)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.PracticeAny,ModifiedNames(changes = UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(PracticeAny,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The org.PracticeAny has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(PracticeAny,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.PracticeAny)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.Temperature...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.Temperature)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.Temperature)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.Temperature,ModifiedNames(changes = UsedName(Temperature,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(temp,[Default]), UsedName(hashCode,[Default]), UsedName(tType,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(date,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(com;Temperature;init;,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(copy$default$3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(stationId,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]))) invalidates 1 classes due to The com.Temperature has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(Temperature,[Default]), UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(temp,[Default]), UsedName(hashCode,[Default]), UsedName(tType,[Default]), UsedName(copy$default$4,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(date,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(com;Temperature;init;,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(copy$default$3,[Default]), UsedName($isInstanceOf,[Default]), UsedName(productArity,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(stationId,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.Temperature)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from org.GenericPractice1.Vehicle...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(org.GenericPractice1.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(org.GenericPractice1.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(org.GenericPractice1.Vehicle,ModifiedNames(changes = UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(manufacturing,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(org;GenericPractice1;Vehicle;init;,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(name,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]))) invalidates 1 classes due to The org.GenericPractice1.Vehicle has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(manufacturing,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(org;GenericPractice1;Vehicle;init;,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(name,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(org.GenericPractice1.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.PropFileMap...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.PropFileMap)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.PropFileMap)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.PropFileMap,ModifiedNames(changes = UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(PropFileMap,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getPropertiesAsMap,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]))) invalidates 1 classes due to The com.PropFileMap has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(ne,[Default]), UsedName(PropFileMap,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getPropertiesAsMap,[Default]), UsedName(main,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.PropFileMap)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.PracticeAny.Vehicle...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.PracticeAny.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.PracticeAny.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.PracticeAny.Vehicle,ModifiedNames(changes = UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(manufacturing,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(name,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(com;PracticeAny;Vehicle;init;,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]))) invalidates 1 classes due to The com.PracticeAny.Vehicle has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(manufacturing,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName(Vehicle,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(name,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(com;PracticeAny;Vehicle;init;,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.PracticeAny.Vehicle)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from com.GenericPractice1.Engine...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(com.GenericPractice1.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(com.GenericPractice1.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(com.GenericPractice1.Engine,ModifiedNames(changes = UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(build,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(com;GenericPractice1;Engine;init;,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]), UsedName(strength,[Default]))) invalidates 1 classes due to The com.GenericPractice1.Engine has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(canEqual,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$2,[Default]), UsedName(equals,[Default]), UsedName(productIterator,[Default]), UsedName(wait,[Default]), UsedName(build,[Default]), UsedName(copy,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(finalize,[Default]), UsedName(isInstanceOf,[Default]), UsedName(tupled,[Default]), UsedName(curried,[Default]), UsedName(ne,[Default]), UsedName(notifyAll,[Default]), UsedName($isInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(productArity,[Default]), UsedName(unapply,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Engine,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(com;GenericPractice1;Engine;init;,[Default]), UsedName(!=,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(eq,[Default]), UsedName(copy$default$1,[Default]), UsedName(strength,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(com.GenericPractice1.Engine)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
